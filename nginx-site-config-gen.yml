---
  - hosts: proxy.domain.com
    gather_facts: yes
    become: yes

    vars: 
    # domain: <- Get it's value during run time
    # backend_ip: <- Get it's value during run time
    # backend_port: <- Get it's value during run time
    # ssl: <- Get it's value during run time
      ssl_certificate: /etc/letsencrypt/live/{{ domain }}/fullchain.pem
      ssl_certificate_key: /etc/letsencrypt/live/{{ domain }}/privkey.pem

    tasks:
      - name: Generate revese config for non-SSL domain - {{ domain }}
        blockinfile:
          path: /etc/nginx/sites-available/{{ domain }}
          create: yes
          block: |
              upstream {{ domain }}_backend  {
                  server {{ backend_ip }}:{{ backend_port }};
              }

              server {
                listen         80;
                listen    [::]:80;
                server_name    {{ domain }};

                location / {
                    gzip off;
                    proxy_set_header X-Forwarded-Ssl on;
                    client_max_body_size 50M;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $http_host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Frame-Options SAMEORIGIN;
                    proxy_pass http://{{ domain }}_backend;
                }

                location /.well-known {
                    alias /var/www/{{ domain }}/.well-known;
                }

                access_log /var/log/nginx/{{ domain }}_access.log;
                error_log /var/log/nginx/{{ domain }}_error.log error;

              }
          state: present
        when: ssl == "no" 

      - name: Generate revese config for SSL domain - {{ domain }}
        blockinfile:
          path: /etc/nginx/sites-available/{{ domain }}
          create: yes
          block: |
            upstream {{ domain }}_backend  {
                server {{ backend_ip }}:{{ backend_port }};
            }
            server {
              listen         80;
              listen    [::]:80;
              server_name    {{ domain }};
              location / {
              return         301 https://$server_name$request_uri;
              }

              location /.well-known/acme-challenge {
                  alias /var/www/{{ domain }}/.well-known/acme-challenge;
              }

              access_log /var/log/nginx/{{ domain }}_access.log;
              error_log /var/log/nginx/{{ domain }}_error.log error;

            }

            server {
              listen        443 ssl http2;
              listen   [::]:443 ssl http2;
              server_name {{ domain }};


              access_log /var/log/nginx/{{ domain }}_access.log;
              error_log /var/log/nginx/{{ domain }}_error.log error;

              ssl on;
              ssl_certificate {{ ssl_certificate }};
              ssl_certificate_key {{ ssl_certificate_key }};
              ssl_session_timeout 5m;
              ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
              ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
              ssl_prefer_server_ciphers on;
              ssl_session_cache shared:SSL:10m;

              location /.well-known/acme-challenge {
                  alias /var/www/{{ domain }}/.well-known/acme-challenge;
              }

              location / {
                  gzip off;
                  proxy_set_header X-Forwarded-Ssl on;
                  client_max_body_size 50M;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $http_host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Frame-Options SAMEORIGIN;
                  proxy_pass http://{{ domain }}_backend;
              }
            }
          state: present
        when: ssl == "yes"


      - name: Enable site for NGINX
        file: 
          src: /etc/nginx/sites-available/{{ domain }}
          dest: /etc/nginx/sites-enabled/{{ domain }}
          state: link

      - name: Reload nginx
        command: /etc/init.d/nginx reload
        register: nginxreload

      - name: Output of nginx reload
        debug: var=nginxreload.stdout  
